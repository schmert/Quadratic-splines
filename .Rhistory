shiny::runApp('QS-interactive')
shiny::runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
?sprintf
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
QS_calc = function(x, alpha, P, H, R) {
w = min(.75, .25+.025*(P-alpha))
beta = max (  min(50, 4*H-3*P) , (4*H-P)/3 )
D = P-20          # delay index
C = (P+50)/2 - H  # control index
knot    = vector("numeric",5)
knot[1] = alpha
knot[2] = alpha + w*(P-alpha)
knot[3] = P
knot[4] = (P+H)/2
knot[5] = (H+beta)/2
A      = matrix(NA,5,5)
target = vector("numeric",5)
# target value at P=1
A[1,]     = (pmax(P-knot, 0))^2
target[1] = 1
# target value at H=1/2
A[2,]     = (pmax(H-knot, 0))^2
target[2] = 1/2
# target value at beta=0
A[3,]     = (pmax(beta-knot, 0))^2
target[3] = 0
# target slope at P=0
A[4,]     = 2*pmax(P-knot, 0)
target[4] = 0
# target slope at beta=0
A[5,]     = 2*pmax(beta-knot, 0)
target[5] = 0
# calculate thetas
theta = solve(A,target)
tmp = (pmax( outer(x,knot,"-") , 0))^2
y = (x >= alpha) * (x <= beta) * R * (tmp %*% theta)  # ASFRs
delay  = D
control= C
x  = as.vector(x)
fx = as.vector(y)
# calculate the a,b,c for each section in  [a x^2 + b x + c] form
aa =    R * cumsum(theta)
bb = -2*R*cumsum(theta*knot)
cc =    R*cumsum(theta*knot^2)
qf = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble(names=x,paste0('f',1:4))
return(list( x=x, fx=fx, knot=knot, theta=theta, beta=beta))
} #QS
z = QS_calc(seq(10,55,.25), 15, 26, 34, 200)
theta = z$theta
x     = z$x
alpha = 15
P     = 26
H     = 34
R     = 200
beta  = z$beta
knot  = z$knot
aa = R * cumsum( theta )
bb = -2* R * cumsum( theta * knot)
cc = R * cumsum( theta * knot^2)
qf = sapply(x, function(z) aa*z^2 + bb*z + cc) %>% t()
matplot(x,qf, lty=1, type='l', ylim=c(0,R))
yy = sapply(knot, function(z) aa*z^2 + bb*z + cc) %>% diag()
points(c(knot, beta), c(yy,0), cex=2)
z
QS_calc = function(x, alpha, P, H, R) {
w = min(.75, .25+.025*(P-alpha))
beta = max (  min(50, 4*H-3*P) , (4*H-P)/3 )
D = P-20          # delay index
C = (P+50)/2 - H  # control index
knot    = vector("numeric",5)
knot[1] = alpha
knot[2] = alpha + w*(P-alpha)
knot[3] = P
knot[4] = (P+H)/2
knot[5] = (H+beta)/2
A      = matrix(NA,5,5)
target = vector("numeric",5)
# target value at P=1
A[1,]     = (pmax(P-knot, 0))^2
target[1] = 1
# target value at H=1/2
A[2,]     = (pmax(H-knot, 0))^2
target[2] = 1/2
# target value at beta=0
A[3,]     = (pmax(beta-knot, 0))^2
target[3] = 0
# target slope at P=0
A[4,]     = 2*pmax(P-knot, 0)
target[4] = 0
# target slope at beta=0
A[5,]     = 2*pmax(beta-knot, 0)
target[5] = 0
# calculate thetas
theta = solve(A,target)
tmp = (pmax( outer(x,knot,"-") , 0))^2
y = (x >= alpha) * (x <= beta) * R * (tmp %*% theta)  # ASFRs
delay  = D
control= C
x  = as.vector(x)
fx = as.vector(y)
# calculate the a,b,c for each section in  [a x^2 + b x + c] form
aa =    R * cumsum(theta)
bb = -2*R*cumsum(theta*knot)
cc =    R*cumsum(theta*knot^2)
#  qf = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
#        t() %>%
#        as_tibble(names=x,paste0('f',1:4))
return(list( x=x, fx=fx, knot=knot, theta=theta, beta=beta))
} #QS
z = QS_calc(seq(10,55,.25), 15, 26, 34, 200)
theta = z$theta
x     = z$x
alpha = 15
P     = 26
H     = 34
R     = 200
beta  = z$beta
knot  = z$knot
aa = R * cumsum( theta )
bb = -2* R * cumsum( theta * knot)
cc = R * cumsum( theta * knot^2)
qf = sapply(x, function(z) aa*z^2 + bb*z + cc) %>% t()
matplot(x,qf, lty=1, type='l', ylim=c(0,R))
yy = sapply(knot, function(z) aa*z^2 + bb*z + cc) %>% diag()
points(c(knot, beta), c(yy,0), cex=2)
yy
qf
aa
bb
cc
z
qf = sapply(x, function(z) aa*z^2 + bb*z + cc) %>% t()
library(tidyverse)
qf = sapply(x, function(z) aa*z^2 + bb*z + cc) %>% t()
qf
din(qf)
dim(qf)
head(qf)
qf = tibble(x,
sapply(x, function(z) aa*z^2 + bb*z + cc) %>% t()
)
qf
?dplyr::tibble
names(qf) = c('x',paste0('f',1:5))
qf = tibble(x,
sapply(x, function(z) aa*z^2 + bb*z + cc) %>% t()
)
qf
qf = cbind(x,
sapply(x, function(z) aa*z^2 + bb*z + cc) %>% t()) %>%
as_tibble()
qf
names(qf) = c('x',paste0('f',1:5))
qf
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t()
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
name(fvals) = paste('f','1:5')
names(fvals) = paste('f','1:5')
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
names(fvals) = paste0('f',1:5)
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
names(fvals) = paste0('f',1:5)
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
names(fvals) = c('x',paste0('f',1:5))
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
names(fvals) = c('x',paste0('f',1:5))
fvals = fvals %>%
pivot_longer(cols=f1:f5,names_to='function')
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
names(fvals) = c('x',paste0('f',1:5))
fvals = fvals %>%
pivot_longer(cols=f1:f5)
fvals = fvals %>%
pivot_longer(cols=cols(f1:f5))
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
names(fvals) = c('x',paste0('f',1:5))
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
names(fvals) = c('x',paste0('f',1:5))
fvals = fvals %>%
pivot_longer(cols=starts_with('f'))
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
names(fvals) = c('x',paste0('f',1:5))
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='function',
values_to='value')
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
names(fvals) = c('x',paste0('f',1:5))
View(fvals)
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
View(fvals)
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,before='f1')
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x,.before='f1')
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble()
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before='f1')
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
fvals
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='function',
values_to='value')
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to=function,
values_to='value')
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx')
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(include = TRUE)
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
dividers = c(-Inf,QS()$knot,QS()$beta,Inf)
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers,
include = TRUE)
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
dividers = c(-Inf,QS()$knot,QS()$beta,Inf)
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers),
include = TRUE)
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
dividers = c(-Inf,QS()$knot,QS()$beta,Inf)
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers),
include = TRUE)
dividers = c(-Inf,knot,beta,Inf)
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers),
include = TRUE)
fvals
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',0:4))
dividers = c(-Inf,knot,beta,Inf)
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers),
include = TRUE)
fvals
names(fvals) = c('x',paste0('f',1:5))
dividers = c(-Inf,knot,beta,Inf)
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers),
include = TRUE)
knot
dividers = c(-Inf,knot,beta,Inf)
sel = function(x,q) {
ok = (q=='f1') & (x >= knot[1]) & (x < knot[2])
ok = ok | (q=='f2') & (x >= knot[2]) & (x < knot[3])
ok = ok | (q=='f3') & (x >= knot[3]) & (x < knot[4])
ok = ok | (q=='f4') & (x >= knot[4]) & (x < knot[5])
ok = ok | (q=='f5') & (x >= knot[5]) & (x < beta)
}
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers),
include = sel(x,quadratic))
sel = function(x,q) {
ok = (q=='f1') & (x >= knot[1]) & (x < knot[2])
ok = ok | (q=='f2') & (x >= knot[2]) & (x < knot[3])
ok = ok | (q=='f3') & (x >= knot[3]) & (x < knot[4])
ok = ok | (q=='f4') & (x >= knot[4]) & (x < knot[5])
ok = ok | (q=='f5') & (x >= knot[5]) & (x < beta)
}
sel(32,'f1')
fvals = sapply(x, function(z) aa*z^2 + bb*z + cc) %>%
t() %>%
as_tibble() %>%
add_column(x, .before=1)
names(fvals) = c('x',paste0('f',1:5))
dividers = c(-Inf,knot,beta,Inf)
sel = function(x,q) {
ok = (q=='f1') & (x >= knot[1]) & (x < knot[2])
ok = ok | (q=='f2') & (x >= knot[2]) & (x < knot[3])
ok = ok | (q=='f3') & (x >= knot[3]) & (x < knot[4])
ok = ok | (q=='f4') & (x >= knot[4]) & (x < knot[5])
ok = ok | (q=='f5') & (x >= knot[5]) & (x < beta)
return(ok)
}
fvals = fvals %>%
pivot_longer(cols=starts_with('f'),
names_to='quadratic',
values_to='fx') %>%
mutate(section = cut(x, breaks=dividers),
include = sel(x,quadratic))
fvals
ggplot(data=fvals) + aes(x=x,y=fx) + geom_line()
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line()
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line() + scale_y_continuous(limits=c(0,300))
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line() + scale_y_continuous(limits=c(0,200))
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line() + scale_y_continuous(limits=c(0,250))
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line() + scale_y_continuous(limits=c(0,250)) + geom_line(data=filter(fvals,include))
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line() + scale_y_continuous(limits=c(0,250)) + geom_line(data=filter(fvals,include), size=4)
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line() + scale_y_continuous(limits=c(0,250)) + geom_line(data=filter(fvals,include), size=3)
ggplot(data=fvals) + aes(x=x,y=fx,color=quadratic) + geom_line() + scale_y_continuous(limits=c(0,250)) + geom_line(data=filter(fvals,include), size=2)
shiny::runApp('QS-interactive')
fvals
fvals %>% filter(include) %>% pull(fx)
y = fvals %>% filter(include) %>% pull(fx)
plot(x,y)
length(y)
length(x)
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
(pmax( outer(knot,knot,"-") , 0))^2
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
runApp('QS-interactive')
