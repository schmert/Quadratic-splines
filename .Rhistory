knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
graphics.off()
if (.Platform$OS.type == 'windows') windows(record=TRUE)
HFD  = read.table("asfrRR.txt",skip=2, header=TRUE)
HFD$Age   = 12:55  ## make numeric
HFD$sched = paste0(HFD$Code, HFD$Year)
HFDmatrix = matrix(HFD$ASFR, nrow=44,
dimnames=list(12:55, unique(HFD$sched)))
# display the first few
print( HFDmatrix[, 1:5])
## grid of ages for QS
delta = .25
x = seq(from= 12+delta/2, to= 56-delta/2, by=delta)
## low ends of age intervals
a = seq(from=12, to=55, by=1)
## age interval width
n = 1
## calculate translation matrix G such that G %*% QS() = grouped rates
tmp = outer( a, x, function(a,x) { 1*(x>=a)*(x <= (a+n)) })
G   = prop.table(tmp,1)
QS = function(R=.20,alpha=15,P=28,H=34) {
w = min(.75, .25+.025*(P-alpha))
beta = max (  min(50, 4*H-3*P) , (4*H-P)/3 )
D = P-20          # delay index
C = (P+50)/2 - H  # control index
knot    = vector("numeric",5)
knot[1] = alpha
knot[2] = alpha + w*(P-alpha)
knot[3] = P
knot[4] = (P+H)/2
knot[5] = (H+beta)/2
A      = matrix(NA,5,5)
target = vector("numeric",5)
# target value at P=1
A[1,]     = (pmax(P-knot, 0))^2
target[1] = 1
# target value at H=1/2
A[2,]     = (pmax(H-knot, 0))^2
target[2] = 1/2
# target value at beta=0
A[3,]     = (pmax(beta-knot, 0))^2
target[3] = 0
# target slope at P=0
A[4,]     = 2*pmax(P-knot, 0)
target[4] = 0
# target slope at beta=0
A[5,]     = 2*pmax(beta-knot, 0)
target[5] = 0
# calculate thetas
theta = solve(A,target)
tmp = (pmax( outer(x,knot,"-") , 0))^2
y = (x >= alpha) * (x <= beta) * R * (tmp %*% theta)  # ASFRs
return(as.vector(y) )
} #QS
results = data.frame(country = character(),
alpha   = numeric(),
R       = numeric(),
P       = numeric(),
H       = numeric())
#####################
selected_schedules = sample( colnames(HFDmatrix), 20)
error_formula = formula( fx ~ I( G %*% QS(R,alpha,P,H) ) )
this_schedule = selected_schedules[1]
this_schedule
fx <- HFDmatrix[, this_schedule]
midage <- 12:55 + 0.5
mac   <- sum(fx*midage)/sum(fx)
init_param <- c(alpha=15,R=max(fx),P=mac, H=(mac+50)/2)
init_param
## find optimal R, P & H params for QS
this.result <- nls(error_formula,
start=init_param,
trace=TRUE)
this.result
results = rbind(results,
data.frame(sched  = this_schedule,
alpha  = round(coef(this.result)['alpha'],2),
R      = round(coef(this.result)['R'],2),
P      = round(coef(this.result)['P'],2),
H      = round(coef(this.result)['H'],2),2)
)
results
#-------- plot --------------
yhat   = QS(alpha=15, R=this.result$par['R'], P=this.result$par['P'], H=this.result$par['H'])
#-------- plot --------------
yhat   = QS(alpha= coef(this.results)['alpha'],
R    = coef(this.result)['R'],
P    = coef(this.result)['P'],
H    = coef(this.result)['H'])
yhat   = QS(alpha= coef(this.result)['alpha'],
R    = coef(this.result)['R'],
P    = coef(this.result)['P'],
H    = coef(this.result)['H'])
yhat   = QS(alpha= coef(this.result)['alpha'],
R    = coef(this.result)['R'],
P    = coef(this.result)['P'],
H    = coef(this.result)['H'])
#-------- plot --------------
yhat   = QS(alpha= coef(this.results)['alpha'],
R    = coef(this.result)['R'],
P    = coef(this.result)['P'],
H    = coef(this.result)['H'])
coef(this.result)['alpha']
coef(this.result)
yhat   = QS(alpha= coef(this.result)['alpha'],
R    = coef(this.result)['R'],
P    = coef(this.result)['P'],
H    = coef(this.result)['H'])
plot( x, yhat, type='o', main=this_schedule, pch=16, cex=.60,
ylim=range(0,yhat,fx))
windows()
plot( x, yhat, type='o', main=this_schedule, pch=16, cex=.60,
ylim=range(0,yhat,fx))
plot( x, yhat, type='o', main=this_schedule, pch=16, cex=.60,
ylim=range(0,yhat,fx))
segments(a,    fx, a+n, fx, col=2, lwd=2)
segments(a,     0, a  , fx, col=2, lwd=2)
segments(a+n,   0, a+n, fx, col=2, lwd=2)
