shiny::runApp()
runApp()
runApp()
x       = seq(10,55,.25)
this_QS = QS(x, input$R, input$alpha, input$P, input$H)
fx      = this_QS$y
runApp()
runApp()
QS = function(x, R,alpha,P,H) {
w = min(.75, .25+.025*(P-alpha))
beta = max (  min(50, 4*H-3*P) , (4*H-P)/3 )
D = P-20          # delay index
C = (P+50)/2 - H  # control index
knot    = vector("numeric",5)
knot[1] = alpha
knot[2] = alpha + w*(P-alpha)
knot[3] = P
knot[4] = (P+H)/2
knot[5] = (H+beta)/2
A      = matrix(NA,5,5)
target = vector("numeric",5)
# target value at P=1
A[1,]     = (pmax(P-knot, 0))^2
target[1] = 1
# target value at H=1/2
A[2,]     = (pmax(H-knot, 0))^2
target[2] = 1/2
# target value at beta=0
A[3,]     = (pmax(beta-knot, 0))^2
target[3] = 0
# target slope at P=0
A[4,]     = 2*pmax(P-knot, 0)
target[4] = 0
# target slope at beta=0
A[5,]     = 2*pmax(beta-knot, 0)
target[5] = 0
# calculate thetas
theta = solve(A,target)
tmp = (pmax( outer(x,knot,"-") , 0))^2
y = (x >= alpha) * (x <= beta) * R * (tmp %*% theta)  # ASFRs
return(list(R=R,alpha=alpha,P=P,H=H,
theta=theta,knot=knot,w=w,beta=beta,delay=D,control=C,
x=as.vector(x) ,y=as.vector(y) ))
} #QS
output$fx_plot <- renderPlot({
x       = seq(10,55,.25)
this_QS = QS(x, input$R, input$alpha, input$P, input$H)
fx      = this_QS$y
QS = function(x, R,alpha,P,H) {
w = min(.75, .25+.025*(P-alpha))
beta = max (  min(50, 4*H-3*P) , (4*H-P)/3 )
D = P-20          # delay index
C = (P+50)/2 - H  # control index
knot    = vector("numeric",5)
knot[1] = alpha
knot[2] = alpha + w*(P-alpha)
knot[3] = P
knot[4] = (P+H)/2
knot[5] = (H+beta)/2
A      = matrix(NA,5,5)
target = vector("numeric",5)
# target value at P=1
A[1,]     = (pmax(P-knot, 0))^2
target[1] = 1
# target value at H=1/2
A[2,]     = (pmax(H-knot, 0))^2
target[2] = 1/2
# target value at beta=0
A[3,]     = (pmax(beta-knot, 0))^2
target[3] = 0
# target slope at P=0
A[4,]     = 2*pmax(P-knot, 0)
target[4] = 0
# target slope at beta=0
A[5,]     = 2*pmax(beta-knot, 0)
target[5] = 0
# calculate thetas
theta = solve(A,target)
tmp = (pmax( outer(x,knot,"-") , 0))^2
y = (x >= alpha) * (x <= beta) * R * (tmp %*% theta)  # ASFRs
return(list(R=R,alpha=alpha,P=P,H=H,
theta=theta,knot=knot,w=w,beta=beta,delay=D,control=C,
x=as.vector(x) ,y=as.vector(y) ))
} #QS
x       = seq(10,55,.25)
this_QS = QS(x, input$R, input$alpha, input$P, input$H)
fx      = this_QS$y
QS = function(x, R,alpha,P,H) {
w = min(.75, .25+.025*(P-alpha))
beta = max (  min(50, 4*H-3*P) , (4*H-P)/3 )
D = P-20          # delay index
C = (P+50)/2 - H  # control index
knot    = vector("numeric",5)
knot[1] = alpha
knot[2] = alpha + w*(P-alpha)
knot[3] = P
knot[4] = (P+H)/2
knot[5] = (H+beta)/2
A      = matrix(NA,5,5)
target = vector("numeric",5)
# target value at P=1
A[1,]     = (pmax(P-knot, 0))^2
target[1] = 1
# target value at H=1/2
A[2,]     = (pmax(H-knot, 0))^2
target[2] = 1/2
# target value at beta=0
A[3,]     = (pmax(beta-knot, 0))^2
target[3] = 0
# target slope at P=0
A[4,]     = 2*pmax(P-knot, 0)
target[4] = 0
# target slope at beta=0
A[5,]     = 2*pmax(beta-knot, 0)
target[5] = 0
# calculate thetas
theta = solve(A,target)
tmp = (pmax( outer(x,knot,"-") , 0))^2
y = (x >= alpha) * (x <= beta) * R * (tmp %*% theta)  # ASFRs
return(list(R=R,alpha=alpha,P=P,H=H,
theta=theta,knot=knot,w=w,beta=beta,delay=D,control=C,
x=as.vector(x) ,y=as.vector(y) ))
} #QS
input = list(R=200, alpha=14.6, P=26.8, H=34.1)
x       = seq(10,55,.25)
this_QS = QS(x, input$R, input$alpha, input$P, input$H)
fx      = this_QS$y
fx
this_QS
this_QS$knot
cut(this_QS$x, breaks=this_QS$knot)
cut(this_QS$x, breaks=c(-Inf,this_QS$knot,Inf))
cut(this_QS$x, breaks=c(-Inf,this_QS$knot,this_QS$beta,Inf))
library(tidyverse)
tibble(x=this_QS$x, fx=this_QS$y)
tibble(x=this_QS$x, fx=this_QS$y) %>%
mutate(section = cut(this_QS$x,
breaks=c(-Inf,this_QS$knot,this_QS$beta,Inf))
)
z=tibble(x=this_QS$x, fx=this_QS$y) %>%
mutate(section = cut(this_QS$x,
breaks=c(-Inf,this_QS$knot,this_QS$beta,Inf))
)
ggplot(data=z) + aes(x=x,y=fx,color=section) + geom_line()
ggplot(data=z) + aes(x=x,y=fx,color=section) + geom_line(size=2) + theme_bw()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
